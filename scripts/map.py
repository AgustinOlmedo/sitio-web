# -*- coding: utf-8 -*-
"""Script to generate the leflet map json data about communities."""

# Standard library imports
import json
import os
import time
from datetime import datetime

# Third party imports
from lektor.project import Project
from unidecode import unidecode


project = Project.discover()
env = project.make_env()
pad = env.new_pad()
bag = pad.databags


# FIXME:
def aware_local_now():
    return datetime.now(
       tz=datetime.strptime(time.strftime("%z",
                                          time.localtime()), "%z").tzinfo)


def get_location(country, province, city):
    """Get location from databag from country, province and city."""
    location = {}
    if country:
        country = unidecode(country).lower()
        _country = bag.get_bag('locations').get(country)
        if province and _country:
            province = unidecode(province).lower()
            _province = _country.get(province)
            if city and _province:
                city = unidecode(city).lower()
                location = _province.get(city)

    return location


def generate_map_info():
    """Generate map info for lefalet map."""
    map_info = {}
    users = pad.query('/usuarios')
    for user in users:
        if user['map']:
            loc = get_location(user['country'], user['province'],
                               user['city'])
            if user['city']:
                username = user['username'].lower()

                # Add event data for community
                events = pad.query('/eventos')
                user_events = []
                for event in events:
                    even_data = {}
                    blocks = event['organizers'].blocks
                    for block in blocks:
                        if block['username'] == username:
                            date_start = event['date_start']
                            if date_start >= aware_local_now():
                                date_ = date_start.strftime('%Y-%m-%d')
                                even_data['title'] = event['title']
                                even_data['date_start'] = date_

                                # FIXME: How to generate url from path?
                                even_data['url'] = '/eventos/' + event['_slug']
                                user_events.append(even_data)

                if username.startswith('python'):
                    icon = 'python'
                elif username.startswith('pyladies'):
                    icon = 'pyladies'
                elif username.startswith('pydata'):
                    icon = 'pydata'

                data = {
                    'icon': icon,
                    'name': user['name'],
                    'url': '/usuarios/' + user['username'],
                    'events': user_events
                }

                if user['city'] not in map_info:
                    map_info[user['city']] = {'coord': loc,
                                              'meetups': [data]}
                else:
                    map_info[user['city']]['meetups'].append(data)

    return map_info


def write_map_info(map_info):
    """Write map data to predefined location."""
    path = os.path.join(env.root_path, 'assets', 'static', 'gen', 'js')
    if not os.path.isdir(path):
        os.makedirs(path)

    fpath = os.path.join(path, 'meetup.js')

    map_info_json = json.dumps(map_info, indent=2, sort_keys=True)
    with open(fpath, 'w') as fh:
        fh.write("/* This file is generated by 'scripts/map_script.py' */\n")
        fh.write('function meetups() {\n    return ')
        fh.write(map_info_json)
        fh.write('\n}')


if __name__ == '__main__':
    map_info = generate_map_info()
    write_map_info(map_info)
